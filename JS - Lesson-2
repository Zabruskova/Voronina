<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <script>
   "use strict";
   /*1 Объясните почему код даёт именно такие результаты?
Подсказка. Чтобы лучше разобраться возьмите этот код и запустите в отладчике в браузере со
включенными точками остановки.*/
   //пример 1
let a = 1, b = 1, c, d;
c = ++a;
alert(c); // ответ: 2 Префиксная форма инкремента увеличивает значение переменной А с 1 до 2
//пример 2
d = b++;
alert(d); //ответ: 1 Постфиксная форма инкремента возаращает страое значение до увеличения, поэтому переменная b так и остается равна 1
//пример 3
c = 2 + ++a;
alert(c); //ответ: 5 Префиксная форма инкремента А увеличивает значение на 1, т.к. А у нас выше уже было равно 2 - оно становится равно 3. Итог сложения 5
//пример 4
d = 2 + b++;
alert(d); //ответ: 4 В примере 2 постфиксная форма инкремента b нам вывела 1, но увеличила переменную до 2. Поэтому в данном примере b равно 2. Итог 4  
alert(a); //3 Из примера 3 у нас А равно 3
alert(b); //3 В примере 4 постфиксная форма инкремента b нам вывела 2, но увеличила переменную до 3. Поэтому в итоговом варианте b равно 3.

/*2 Чему будут равны переменные x и q в примере ниже? Написать почему так произошло
(описать последовательность действий).*/
let q = 2;
let x = 1 + (q *= 2); // изменила имя переменной. Первым проходит действие в скобках: умножаем 2 на 2, получаем 4. Далее сложение. Итог 5. х = 5, q = 4   
console.log(x)

/*3 Объявить две переменные w и s и задать им целочисленные произвольные начальные
значения.
Затем написать скрипт, который работает по следующему принципу:
- если w и s положительные, вывести их разность (ноль можно считать положительным числом);
- если w и s отрицательные, вывести их произведение;
- * (этот пункт по сложнее, делайте по желанию) если w и s разных знаков, вывести их сумму;*/
let w = -1, s = 0;
if (w >=0 && s>=0) {
    alert (w - s);
} else if (w < 0 && s < 0) {
    alert (w * s);
} else if (w >= 0 && s < 0) {
    alert (w + s);
} else if (w < 0 && s >= 0) {
    alert (w + s);
}

/*4 Реализовать основные 4 арифметические операции (+, -, /, *) в виде функций с двумя
параметрами. Т.е. например, функция для сложения должна принимать два числа, складывать их
и возвращать результат.
Обязательно использовать оператор return.*/
function sum (g, h) {
    return (g + h)
}
console.log (sum (1, 2));

function sub (k, l) {
    return (k - l)
}
console.log (sub (3, 4));

function seg (n, m) {
    return (n / m)
}
console.log (seg (6, 9));

function mult (r, f) {
    return (r * f)
}
console.log (mult (2, 2));

/*5 Реализовать функцию с тремя параметрами: function mathOperation(arg1, arg2, operation),
где arg1, arg2 – значения аргументов, operation – строка с названием операции. В зависимости от
переданного значения операции (использовать switch) выполнить одну из арифметических
операций
(использовать функции из задания 4) и вернуть полученное значение.*/

function mathOperation (arg1, arg2, operation) {
    switch (operation) {
        case "+":
            return sum (arg1, arg2);
        case "-":
            return sub (arg1, arg2);
        case "/":
            return seg (arg1, arg2);
        case "*":
            return mult (arg1, arg2);
        default:
            throw new error ("Операция " + operation + "не предусмотрена данной функцией.")
    }
}
console.log(mathOperation(1, 2, "+"));
console.log(mathOperation(1, 2, "-"));
console.log(mathOperation(1, 2, "/"));
console.log(mathOperation(1, 2, "*"));
console.log(mathOperation(1, 2, "&"));
    </script>
 
</body>
</html>
